openapi: 3.1.0
info:
  title: Ecommerce API
  version: 1.0.0
  description: API para un sistema ecommerce siguiendo los principos REST
  # contact:
  #   name: Cristian Manuel Herrera Guallo
  #   email: cristianmherrera21@gmail.com
  #   url: https://github.com/cris6h16
servers:
  - url: http://192.168.100.135:8080
    description: Prod Server
paths:
  /api/v1/auth/signup:
    post:
      operationId: signup
      summary: registro de Usuarios
      description: crearse una cuenta de usuario
      requestBody:
        $ref: '#/components/requestBodies/Signup'
      responses:
        201:
          description: Usuario creado exitosamente
          headers:
            Location:
              description: URL de la nueva cuenta creada
              schema:
                type: string
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
        409:
          description: Algun atributo unico ya existe o esta en uso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailAlreadyExists:
                  value:
                    message: "El correo electrónico ya está en uso"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/auth/login:
    post:
      operationId: Login
      summary: iniciar sesion
      description: "iniciar sesion en la aplicacion"
      requestBody:
        $ref: '#/components/requestBodies/Login'
      responses:
        200:
          description: Usuario autenticado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginOutput'
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
        403:
          description: Credenciales incorrectas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InvalidCredentials:
                  value:
                    message: "Credenciales incorrectas"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/email/send-email-verification:
    post:
      summary: SOLICITAR CÓDIGO DE VERIFICACIÓN AL CORREO ELECTRÓNICO
      description: enviar codigos de verificacion a los correos de los usuarios registrados
      requestBody:
        $ref: '#/components/requestBodies/SendEmailVerification'
      responses:
        204:
          description: Correo de verificacion enviado exitosamente (si el correo no esta registrado, no se envia nada y se responde con 204)
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InvalidActionType:
                  value:
                    message: "El tipo de acción no es soportado"
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/users/verify-email:
    post:
      summary: verificar el correo de un usuario
      description: verificar el correo de un usuario proporcionando el codigo de verificacion
      requestBody:
        $ref: '#/components/requestBodies/VerifyEmail'
      responses:
        204:
          description: Correo verificado exitosamente
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
                CodeRegexMismatch:
                  value:
                    message: "El código de verificación no cumple con el formato esperado"
        403:
          description: Codigo de verificacion no valido o ya usado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                ValidVerificationCodeNotFound:
                  value:
                    message: "El código de verificación no es válido o ya ha sido utilizado"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/auth/reset-password:
    post:
      summary: restablecer la contraseña de un usuario
      description: restablecer la contraseña de un usuario proporcionando el correo electronico, el codigo de verificacion y la nueva contraseña
      requestBody:
        $ref: '#/components/requestBodies/SendEmailVerification'
      responses:
        204:
          description: La contraseña se ha restablecido exitosamente
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
        403:
          description: Codigo de verificacion no valido o ya usado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                ValidVerificationCodeNotFound:
                  value:
                    message: "El código de verificación no es válido o ya ha sido utilizado"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/auth/refresh-token:
    post:
      summary: refrescar el token de acceso
      description: refrescar el token de acceso estando autenticado (Autenticacion Bearer)
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: Token de acceso refrescado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        403:
          description: Usuario no autenticado
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/products:
    get:
      summary: obtener todos los productos
      description: obtener todos los productos disponibles aplicando filtros y paginacion
      parameters:
        - name: page
          in: query
          description: Numero de pagina (0-indexed)
          required: false
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          description: Cantidad de productos por pagina
          required: false
          schema:
            type: integer
            maximum: 100
        - name: sort
          in: query
          description: Ordenar los productos por campos específicos
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - price
                - stock
                - id
            example: [ "price,asc", "stock,desc" ]
        - name: query
          in: query
          description: Texto de busqueda para filtrar los productos
          required: false
          schema:
            type: string
        - name: price
          in: query
          description: Filtrar productos por precio o rango de precios utilizando los operadores `>` (mayor que) o `<` (menor que). El rango de precios se define con dos propiedades 'price' y su rango
          required: false
          schema:
            type: array
            items:
              type: string
              pattern: "^[<>]\\d+$"
            example: [ ">10", "<99" ]
        - name: categoryId
          in: query
          description: Filtrar productos por categoria
          required: false
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: Pagina de productos
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  pageable:
                    type: object
                    properties:
                      pageNumber:
                        type: integer
                      pageSize:
                        type: integer
                      sort:
                        type: object
                        properties:
                          sorted:
                            type: boolean
                          empty:
                            type: boolean
                          unsorted:
                            type: boolean
                      offset:
                        type: integer
                      paged:
                        type: boolean
                      unpaged:
                        type: boolean
                  first:
                    type: boolean
                  last:
                    type: boolean
                  size:
                    type: integer
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductDTO'
                  number:
                    type: integer
                  sort:
                    type: object
                    properties:
                      sorted:
                        type: boolean
                      empty:
                        type: boolean
                      unsorted:
                        type: boolean
                  numberOfElements:
                    type: integer
                  empty:
                    type: boolean

        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InvalidCategoryId:
                  description: aplica solo si se envia el parametro 'categoryId'
                  value:
                    message: "Id de la categoría no es un número entero"
        403:
          description: Petición prohibida explicitamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InvalidSortProperty:
                  description: "La propiedad de ordenamiento no esta permitida (propiedad 'sort' de paginacion)"
                  value:
                    message: "Propiedad de ordenamiento no permitida"
        default:
          $ref: '#/components/responses/UnexpectedError'

    post:
      summary: crear un nuevo producto
      description: d
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateProductDTO'
      responses:
        201:
          description: Producto creado exitosamente
          headers:
            Location:
              description: URL del nuevo producto creado
              schema:
                type: string

        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                ProductNameLengthMismatch:
                  value:
                    message: "El nombre del producto debe contener entre 1 y 255 caracteres"
                InvalidPrice:
                  value:
                    message: "El precio es inválido"
                EmptyFileList:
                  value:
                    message: "No es posible crear un producto sin imágenes"
        403:
          description: |
            1: Usuario no autenticado (respuesta sin contenido en el cuerpo de la respuesta)
            2: No tiene el rol de Vendedor, por lo tanto no autorizado para crear productos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailNotVerified:
                  value:
                    message: "Tu correo electrónico no está verificado. Completa el proceso de verificación para continuar"
        409:
          description: El usuario ya tiene un producto con el mismo nombre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                UniqueUserIdProductName:
                  value:
                    message: "No se pudo crear el producto ya que usted ya cuenta con un producto con el mismo nombre"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/carts/items:
    post:
      summary: Agregar un producto al carrito
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
                required:
                  - productId
                  - quantity
                example:
                  productId: 1
                  quantity: 2
      responses:
        204:
          description: Producto agregado al carrito exitosamente
        403:
          description: Usuario no autenticado
        400:
          description: Cantidad a agregar invalida (menor o igual a 0)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InvalidQuantity:
                  value:
                    message: "La cantidad a agregar debe ser mayor a 0"
        409:
          description: Stock insuficiente o producto ya esta en el carrito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InsufficientStock:
                  value:
                    message: "Stock Insuficiente, por favor reduzca la cantidad"
                ProductAlreadyInCart:
                  value:
                    message: "El producto ya se encuentra en el carrito"
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v1/carts/items/{itemId}/amount:
    post:
      summary: Cambiar la cantidad de un producto en el carrito
      security:
        - BearerAuth: [ ]
      parameters:
        - name: itemId
          in: path
          description: ID del item en el carrito
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
      responses:
        204:
          description: Cantidad de producto en el carrito cambiada exitosamente
        400:
          description: El valor de cambio es 0 (invalido)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InvalidDelta:
                  value:
                    message: "El valor de cambio no debe ser 0"
        403:
          description: Usuario no autenticado
        404:
          description: Item no encontrado en el carrito del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                ItemNotFound:
                  value:
                    message: "El Ítem especificado no existe en su carrito"
        default:
          $ref: '#/components/responses/UnexpectedError'

    /api/v1/carts:
      get:
        summary: Obtener el carrito de un usuario
        security:
          - BearerAuth: [ ]
        responses:
          200:
            description: Carrito del usuario
            content:
              $ref: '#/components/schemas/CartDTO'
          403:
            description: Usuario no autenticado
          default:
            $ref: '#/components/responses/UnexpectedError'

    /api/v1/addresses:
      post:
        summary: Agregar una direccion de envio
        security:
          - BearerAuth: [ ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  street:
                    type: string
                  city:
                    type: string
                  state:
                    type: string
                  mobileNumber:
                    type: string
                  reference:
                    type: string
                  required:
                    - address
                    - city
                    - state
                    - mobileNumber
                    - reference
        responses:
          201:
            description: Direccion de envio agregada exitosamente
            headers:
              Location:
                description: URL de la nueva direccion de envio creada
                schema:
                  type: string
          400:
            description: Error en los datos de entrada enviados
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponseDTO'
                examples:
                  InvalidZip:
                    value:
                      message: "La calle proporcionada no puede estar en blanco"
          403:
            description: Usuario no autenticado
          default:
            $ref: '#/components/responses/UnexpectedError'
      get:
        summary: Obtener las direcciones de envio del usuario autenticado
        security:
          - BearerAuth: [ ]
        responses:
          200:
            description: Direcciones de envio del usuario
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AddressDTO'
          403:
            description: Usuario no autenticado
          default:
            $ref: '#/components/responses/UnexpectedError'
    /api/v1/addresses/{id}:
      delete:
        summary: Eliminar una direccion de envio
        security:
          - BearerAuth: [ ]
        parameters:
          - name: id
            in: path
            description: ID de la direccion de envio
            required: true
            schema:
              type: integer
        responses:
          204:
            description: Direccion de envio eliminada exitosamente
          403:
            description: Usuario no autenticado
          404:
            description: Direccion de envio no encontrada
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponseDTO'
                examples:
                  AddressNotFound:
                    value:
                      message: "Dirección de envío no encontrada"
          default:
            $ref: '#/components/responses/UnexpectedError'

components:
  responses:
    UnexpectedError:
      description: 500 - Error inesperado en el servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'
          examples:
            UnexpectedError:
              value:
                message: "Ha ocurrido un error inesperado"

  schemas:
    LoginDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginOutput:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    SignupDTO:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    ErrorResponseDTO:
      type: object
      properties:
        message:
          type: string
    SendEmailVerificationDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        actionType:
          type: string
          enum: [ "RESET_PASSWORD", "VERIFY_EMAIL" ]
    VerifyEmailDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        code:
          type: string
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        stock:
          type: integer
        description:
          type: string
        weightPounds:
          type: number
        widthCM:
          type: number
        heightCM:
          type: number
        lengthCM:
          type: number
        imageUrls:
          type: array
          items:
            type: string
        user:
          $ref: '#/components/schemas/UserInProductDTO'
        category:
          $ref: '#/components/schemas/CategoryDTO'
    UserInProductDTO:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    CreateProductDTO:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        stock:
          type: integer
        description:
          type: string
        weightPounds:
          type: number
        widthCM:
          type: number
        heightCM:
          type: number
        lengthCM:
          type: number
        images:
          type: array
          items:
            type: string
            format: binary
        categoryId:
          type: integer

    CartDTO:
      type: object
      properties:
        id:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDTO'
        total:
          type: number


    CartItemDTO:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        productName:
          type: string
        productImgUrl:
          type: array
          items:
            type: string
        quantity:
          type: integer
        price:
          type: number
        total:
          type: number

    AddressDTO:
      type: object
      properties:
        id:
          type: integer
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        mobileNumber:
          type: string
        reference:
          type: string
        userId:
          type: integer

  requestBodies:
    Signup:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupDTO'
    Login:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginDTO'
    VerifyEmail:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerifyEmailDTO'
    SendEmailVerification:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SendEmailVerificationDTO'



  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT