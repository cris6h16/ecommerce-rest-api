openapi: 3.1.0
info:
  title: Ecommerce API
  version: 1.0.0
  description: API para un sistema ecommerce siguiendo los principos REST
  # contact:
  #   name: Cristian Manuel Herrera Guallo
  #   email: cristianmherrera21@gmail.com
  #   url: https://github.com/cris6h16
servers:
  - url: http://192.168.100.135:8080
    description: Prod Server
paths:
  /api/v1/auth/signup:
    post:
      operationId: signup
      summary: registro de Usuarios
      description: crearse una cuenta de usuario
      requestBody:
        $ref: '#/components/requestBodies/Signup'
      responses:
        201:
          description: Usuario creado exitosamente
          headers:
            Location:
              description: URL de la nueva cuenta creada
              schema:
                type: string
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                PasswordTooShort:
                  value:
                    message: "La contraseña debe contener entre 8 y 80 caracteres"
                FirstnameLengthMismatch:
                  value:
                    message: "El primer apellido debe contener entre 1 y 30 caracteres"
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
        409:
          description: Algun atributo unico ya existe o esta en uso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailAlreadyExists:
                  value:
                    message: "El email ya está registrado"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/auth/login:
    post:
      operationId: Login
      summary: iniciar sesion
      description: "iniciar sesion en la aplicacion"
      requestBody:
        $ref: '#/components/requestBodies/Login'
      responses:
        200:
          description: Usuario autenticado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginOutput'
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
        403:
          description: Credenciales incorrectas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InvalidCredentials:
                  value:
                    message: "Credenciales incorrectas"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/email/send-email-verification:
    post:
      summary: enviar correo de verificacion
      description: enviar codigos de verificacion a los correos de los usuarios registrados
      requestBody:
        $ref: '#/components/requestBodies/SendEmailVerification'
      responses:
        204:
          description: Correo de verificacion enviado exitosamente (si el correo no esta registrado, no se envia nada y se responde con 204)
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                InvalidActionType:
                  value:
                    message: "El tipo de acción no es soportado"
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/users/verify-email:
    post:
      summary: verificar el correo de un usuario
      description: verificar el correo de un usuario proporcionando el codigo de verificacion
      requestBody:
        $ref: '#/components/requestBodies/VerifyEmail'
      responses:
        204:
          description: Correo verificado exitosamente
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
                CodeRegexMismatch:
                  value:
                    message: "El código de verificación no cumple con el formato esperado"
        403:
          description: Codigo de verificacion no valido o ya usado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                ValidVerificationCodeNotFound:
                  value:
                    message: "El código de verificación no es válido o ya ha sido utilizado"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/auth/reset-password:
    post:
      summary: restablecer la contraseña de un usuario
      description: restablecer la contraseña de un usuario proporcionando el correo electronico, el codigo de verificacion y la nueva contraseña
      requestBody:
        $ref: '#/components/requestBodies/SendEmailVerification'
      responses:
        204:
          description: La contraseña se ha restablecido exitosamente
        400:
          description: Error en los datos de entrada enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                EmailRegexMismatch:
                  value:
                    message: "El correo electrónico ingresado no tiene el formato correcto"
                CodeRegexMismatch:
                  value:
                    message: "El código de verificación no cumple con el formato esperado"
                PasswordLengthMismatch:
                  value:
                    message: "La contraseña debe contener entre 8 y 80 caracteres"
        403:
          description: Codigo de verificacion no valido o ya usado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                ValidVerificationCodeNotFound:
                  value:
                    message: "El código de verificación no es válido o ya ha sido utilizado"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/auth/refresh-token:
    post:
      summary: refrescar el token de acceso
      description: refrescar el token de acceso estando autenticado (Autenticacion Bearer)
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: Token de acceso refrescado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenDTO'
        401:
          description: La autenticacion ha fallado, posiblemente el token de acceso ha expirado o es invalido
        404:
          description: El id del usuario que esta en el token referencia a un usuario que no existe en la base de datos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                UserNotFound:
                  value:
                    message: "Usuario no encontrado"
        default:
          $ref: '#/components/responses/UnexpectedError'
  /api/v1/products:
    get:
      summary: obtener todos los productos
      description: obtener todos los productos disponibles aplicando filtros y paginacion
      parameters:
        - name: page
          in: query
          description: Numero de pagina (0-indexed)
          required: false
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          description: Cantidad de productos por pagina
          required: false
          schema:
            type: integer
            maximum: 100
        - name: sort
          in: query
          description: Ordenar los productos por campos específicos
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - price
                - stock
                - id
            example: [ "price,asc", "stock,desc" ]
        - name: query
          in: query
          description: Texto de busqueda para filtrar los productos
          required: false
          schema:
            type: string
        - name: price
          in: query
          description: Filtrar productos por precio o rango de precios utilizando los operadores `>` (mayor que) o `<` (menor que). El rango de precios se define con dos propiedades 'price' y su rango
          required: false
          schema:
            type: array
            items:
              type: string
              pattern: "^[<>]\\d+$"
            example: [ ">10", "<99" ]
        - name: categoryId
          in: query
          description: Filtrar productos por categoria
          required: false
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/responses/PageProductDTO'
components:
  responses:
    UnexpectedError:
      description: 500 - Error inesperado en el servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'
          examples:
            UnexpectedError:
              value:
                message: "Ha ocurrido un error inesperado"
    PageProductDTO:
      description: Pagina de productos
      content:
        application/json:
          schema:
            type: object
            properties:
              totalPages:
                type: integer
              totalElements:
                type: integer
              pageable:
                type: object
                properties:
                  pageNumber:
                    type: integer
                  pageSize:
                    type: integer
                  sort:
                    type: object
                    properties:
                      sorted:
                        type: boolean
                      empty:
                        type: boolean
                      unsorted:
                        type: boolean
                  offset:
                    type: integer
                  paged:
                    type: boolean
                  unpaged:
                    type: boolean
              first:
                type: boolean
              last:
                type: boolean
              size:
                type: integer
              content:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDTO'
              number:
                type: integer
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                  empty:
                    type: boolean
                  unsorted:
                    type: boolean
              numberOfElements:
                type: integer
              empty:
                type: boolean
  schemas:
    LoginDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginOutput:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    AccessTokenDTO:
      type: object
      properties:
        accessToken:
          type: string
    SignupDTO:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    ErrorResponseDTO:
      type: object
      properties:
        message:
          type: string
    SendEmailVerificationDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        actionType:
          type: string
          enum: [ "RESET_PASSWORD", "VERIFY_EMAIL" ]
    VerifyEmailDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        code:
          type: string
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        stock:
          type: integer
        description:
          type: string
        weightPounds:
          type: number
        widthCM:
          type: number
        heightCM:
          type: number
        lengthCM:
          type: number
        imageUrls:
          type: array
          items:
            type: string
        user:
          $ref: '#/components/schemas/UserInProductDTO'
        category:
          $ref: '#/components/schemas/CategoryDTO'
    UserInProductDTO:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
  requestBodies:
    Signup:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupDTO'
    Login:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginDTO'
    VerifyEmail:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerifyEmailDTO'
    SendEmailVerification:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SendEmailVerificationDTO'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT