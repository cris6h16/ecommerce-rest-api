{
	"info": {
		"_postman_id": "8cde6bee-134b-448c-bccd-1c33a431ab14",
		"name": "Ecommerce-FINAL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29096460"
	},
	"item": [
		{
			"name": "Inicio de Sesion",
			"item": [
				{
					"name": "TF001 - Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El token de Acceso tiene al menos 10 caracteres\", function () {\r",
									"    let accessToken = pm.response.json().accessToken;\r",
									"    pm.expect(accessToken.length).to.be.at.least(10);\r",
									"});\r",
									"\r",
									"pm.test(\"El header Content-Type es 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"El token de Refresco tiene al menos 10 caracteres\", function () {\r",
									"    let refreshToken = pm.response.json().refreshToken;\r",
									"    pm.expect(refreshToken.length).to.be.at.least(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Status es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF002 - Email Invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El correo electr칩nico ingresado no tiene el formato correcto\";\r",
									"\r",
									"pm.test(\"Status es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"email@invalido\",\r\n    \"password\": \"12345\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF003 - Email no Registrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"Credenciales inv치lidas\";\r",
									"\r",
									"pm.test(\"Status es 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"noregistrado@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF004 - Usuario Deshabilitado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"Credenciales inv치lidas\";\r",
									"\r",
									"pm.test(\"Status es 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"deshabilitado@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF005 - Contrasena Incorrecta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"Credenciales inv치lidas\";\r",
									"\r",
									"pm.test(\"Status es 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"password\": \"esta-es-una-contrasena-invalida\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Creacion de Cuenta",
			"item": [
				{
					"name": "TF006 - Registro Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status es 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Location header correcto\", function () {\r",
									"    const location = pm.response.headers.get(\"Location\");\r",
									"    pm.expect(location).to.match(/\\/api\\/v1\\/users\\/\\d+$/);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.collectionVariables.get(\"hostURL\");\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/v1/tests/reset-functional-testing-db`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({}) \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Reseteo de BD es 204\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Cristian\",\r\n    \"lastname\": \"Herrera\",\r\n    \"email\": \"cristianh9073@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/signup",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF007 - Primer Nombre Invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El primer nombre debe contener entre 1 y 30 caracteres\";\r",
									"\r",
									"pm.test(\"Status es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"\",\r\n    \"lastname\": \"Herrera\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/signup",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF008 - Primer Apellido Invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El primer apellido debe contener entre 1 y 30 caracteres\";\r",
									"\r",
									"pm.test(\"Status es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Cristian\",\r\n    \"lastname\": \"  \",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/signup",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF009 - Email Invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El correo electr칩nico ingresado no tiene el formato correcto\";\r",
									"\r",
									"\r",
									"pm.test(\"Status es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Cristian\",\r\n    \"lastname\": \"Herrera\",\r\n    \"email\": \"este-es-un-correo@invalido\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/signup",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF010 - Contrase침a Invalida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"La contrase침a debe contener entre 8 y 80 caracteres\";\r",
									"\r",
									"pm.test(\"Status es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Cristian\",\r\n    \"lastname\": \"Herrera\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/signup",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF011 - Email Ya Registrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El email ya est치 registrado\";\r",
									"\r",
									"\r",
									"pm.test(\"Status es 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Cristian\",\r\n    \"lastname\": \"Herrera\",\r\n    \"email\": \"existente@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/signup",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Solicitar C칩digo al Email",
			"item": [
				{
					"name": "TF012 - Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status es 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"actionType\": \"RESET_PASSWORD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/email/send-email-verification",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"email",
								"send-email-verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF013 - Email Invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El correo electr칩nico ingresado no tiene el formato correcto\";\r",
									"\r",
									"pm.test(\"Status es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"email invalido@gmail.com\",\r\n    \"actionType\": \"RESET_PASSWORD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/email/send-email-verification",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"email",
								"send-email-verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF014 - Accion Invalida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El tipo de acci칩n no es soportado\";\r",
									"\r",
									"pm.test(\"Status es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"actionType\": \"ACCION_INVALIDA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/email/send-email-verification",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"email",
								"send-email-verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF015 - Email No Registrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status es 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"noregistrado@gmail.com\", \"actionType\": \"RESET_PASSWORD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/email/send-email-verification",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"email",
								"send-email-verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF016 - Usuario Deshabilitado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status es 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"deshabilitado@gmail.com\", \"actionType\": \"RESET_PASSWORD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/email/send-email-verification",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"email",
								"send-email-verification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verificar Email",
			"item": [
				{
					"name": "TF017 - Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status es 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.collectionVariables.get(\"hostURL\");\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/v1/tests/reset-functional-testing-db`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({}) \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Reseteo de BD es 204\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"email-no-verificado@gmail.com\",\r\n    \"code\": \"ZJM307\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/users/verify-email",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF018 - Email Invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El correo electr칩nico ingresado no tiene el formato correcto\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"email@invalidocom\",\r\n    \"code\": \"ZJM307\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/users/verify-email",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF019 - Codigo Invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no cumple con el formato esperado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"5DS4UF\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/users/verify-email",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF020 - Usuario no Existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"noregistrado@gmail.com\",\r\n    \"code\": \"ZJM307\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/users/verify-email",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF021 - Usuario no Habilitado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"deshabilitado@gmail.com\",\r\n    \"code\": \"4A5C1V\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/users/verify-email",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF022 - Codigo no Perteneciente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"ZJM307\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/users/verify-email",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF023 - C칩digo Ya Usado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// // resetar DB, para tener el codigo no usado\r",
									"const url = pm.collectionVariables.get(\"hostURL\");\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/v1/tests/reset-functional-testing-db`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({}) \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"PRE: ResetDB es 204\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"\r",
									"    if(res) usarCodigo.apply();\r",
									"});\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"const codigo = requestBody.code;\r",
									"const email = requestBody.email;\r",
									"\r",
									"usarCodigo = () => pm.sendRequest({\r",
									"    url: `${url}/api/v1/users/verify-email`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: {\r",
									"            \"email\": email,\r",
									"            \"code\": codigo\r",
									"        }\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"PRE: Se uso el codigo (pre - 204)\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"AXY184\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/users/verify-email",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF024 - C칩digo Expirado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"FLAU5C\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/users/verify-email",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify-email"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Restablecer Contrasena",
			"item": [
				{
					"name": "TF025 - Exitoso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.collectionVariables.get(\"hostURL\");\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/v1/tests/reset-functional-testing-db`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({}) \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"PRE: ResetDB es 204\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Estado es 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"04S8R5\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF026 - Email Invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El correo electr칩nico ingresado no tiene el formato correcto\";\r",
									"\r",
									"pm.test(\"Status es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"@emailinvalido.com\",\r\n    \"code\": \"04S8R5V340\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF027 - Contrasena Invalida",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"La contrase침a debe contener entre 8 y 80 caracteres\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"04S8R5\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF028 - Codigo Invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no cumple con el formato esperado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"04S8R*\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF029 - Usuario No Existe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"no-existe@gmail.com\",\r\n    \"code\": \"4A5C1V\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF030 - Usuario no Habilitado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"deshabilitado@gmail.com\",\r\n    \"code\": \"4A5C1V\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF031 - Codigo No Perteneciente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8080/api/v1/tests/reset-functional-testing-db',\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({}) \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"PRE: ResetDB es 204\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"4A5C1V\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF032 - Codigo Ya Usado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// resetar DB, para tener el codigo no usado\r",
									"const url = pm.collectionVariables.get(\"hostURL\");\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/v1/tests/reset-functional-testing-db`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({}) \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"PRE: ResetDB es 204\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"\r",
									"    if(res) usarCodigo.apply();\r",
									"});\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"const codigo = requestBody.code;\r",
									"const email = requestBody.email;\r",
									"const contra = requestBody.password;\r",
									"\r",
									"usarCodigo = () => pm.sendRequest({\r",
									"    url: `${url}/api/v1/auth/reset-password`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: {\r",
									"            \"email\": email,\r",
									"            \"code\": codigo,\r",
									"            \"password\": contra\r",
									"        }\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"PRE: Se uso el codigo (204)\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"04S8R5\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF033 - Codigo Expirado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El c칩digo de verificaci칩n no es v치lido o ya ha sido utilizado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"existente@gmail.com\",\r\n    \"code\": \"4J5G44\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/reset-password",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Refrescar Token de Acceso",
			"item": [
				{
					"name": "TF034 - Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Estatus es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"El token de Acceso tiene al menos 10 caracteres\", function () {\r",
									"    let accessToken = pm.response.json().accessToken;\r",
									"    pm.expect(accessToken.length).to.be.at.least(10);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzM2MDI2MzQ5LCJleHAiOjE3NDM4MDIzNDksImF1dGhvcml0aWVzIjoiW1JPTEVfVVNFUl0ifQ.PVBJ1oCjBmS0ygR7GeN7tlYs_-Way26KU0lysxuZq6imJXvlstKfsvaA9g5LFrhz",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/refresh-token",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF035 - Usuario Deshabilitado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"Usuario no encotrado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiIyIiwiaWF0IjoxNzM2MTM0MDkxLCJleHAiOjE3NDM5MTAwOTEsImF1dGhvcml0aWVzIjoiW1JPTEVfVVNFUl0ifQ.Kgt6Zqaa4qQLZnUsr6hbWjH08P6l_IThjouRk1ejIr8gUaQBQD39EJHGCPTO9rw_",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/auth/refresh-token",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Obtener Productos",
			"item": [
				{
					"name": "TF036 - Paginacion por Defecto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let pageable = pm.response.json().pageable;\r",
									"\r",
									"pm.test(\"Numero de Pagina es 0\", function () {\r",
									"    pm.expect(pageable.pageNumber).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Tama침o de pagina es 20 (solicitada)\", function () {\r",
									"    pm.expect(pageable.pageSize).to.equal(20); \r",
									"});\r",
									"\r",
									"\r",
									"const b = pm.response.json();\r",
									"pm.test(`Cantidad de Productos es Igual al Total de elementos (${b.totalElements})`, function () {\r",
									"    pm.expect(b.totalElements).to.equal(b.content.length);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF037 - Orden ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const b = pm.response.json();\r",
									"\r",
									"pm.test(`Cantidad de Productos es Igual a 4`, function () {\r",
									"    pm.expect(b.content.length).to.equal(4);\r",
									"});\r",
									"\r",
									"pm.test(`Productos.Precio estan ordenados ASC`, function () {\r",
									"    let precio1 = b.content[0].price;\r",
									"    let precio2 = b.content[1].price;\r",
									"    let precio3 = b.content[2].price;\r",
									"    let precio4 = b.content[3].price;\r",
									"\r",
									"    pm.expect(precio1).to.lessThan(precio2);\r",
									"    pm.expect(precio2).to.lessThan(precio3);\r",
									"    pm.expect(precio3).to.lessThan(precio4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products?sort=price,asc",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "price,asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TF038 - Orden DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const b = pm.response.json();\r",
									"\r",
									"pm.test(`Cantidad de Productos es Igual a 4`, function () {\r",
									"    pm.expect(b.content.length).to.equal(4);\r",
									"});\r",
									"\r",
									"pm.test(`Productos.Id estan ordenados DESC`, function () {\r",
									"    let id1 = b.content[0].id;\r",
									"    let id2 = b.content[1].id;\r",
									"    let id3 = b.content[2].id;\r",
									"    let id4 = b.content[3].id;\r",
									"\r",
									"    pm.expect(id1).to.greaterThan(id2);\r",
									"    pm.expect(id2).to.greaterThan(id3);\r",
									"    pm.expect(id3).to.greaterThan(id4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products?sort=id,desc",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TF039 - Propiedad no Permitida (SortBy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"Propiedad de ordenamiento no permitida\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products?sort=description,desc",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "description,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TF040 - Query (Sin Acento)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const b = pm.response.json();\r",
									"const nombres = b.content.map(c => c.name);\r",
									"\r",
									"pm.test(`Cantidad de Productos es Igual a 3`, function () {\r",
									"    pm.expect(b.content.length).to.equal(3);\r",
									"});\r",
									"\r",
									"pm.test(`Productos con coincidencia en Producto.Nombre`, function () {\r",
									"    pm.expect(nombres).contains(\r",
									"        \"Cable USB 3.0 marca Samsung\",\r",
									"        \"Celular Samsung Galaxy S21 Ultra 5G\"\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test(`Productos con coincidencia en Producto.Descripcion`, function () {\r",
									"    pm.expect(nombres).contains(\"Camisa de vestir\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products?query=Telefono samsun yo quiero",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "query",
									"value": "Telefono samsun yo quiero"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TF041 - Query (Con Acento)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const b = pm.response.json();\r",
									"const nombres = b.content.map(c => c.name);\r",
									"\r",
									"pm.test(`Cantidad de Productos es Igual a 3`, function () {\r",
									"    pm.expect(b.content.length).to.equal(3);\r",
									"});\r",
									"\r",
									"pm.test(`Productos con coincidencia en Producto.Nombre`, function () {\r",
									"    pm.expect(nombres).contains(\r",
									"        \"Cable USB 3.0 marca Samsung\",\r",
									"        \"Celular Samsung Galaxy S21 Ultra 5G\"\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test(`Productos con coincidencia en Producto.Descripcion`, function () {\r",
									"    pm.expect(nombres).contains(\"Camisa de vestir\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products?query=tel칠fono s치msun yo quiero",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "query",
									"value": "tel칠fono s치msun yo quiero"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TF042 - Query (Sin distinci칩n MAYUS/MINUS)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const b = pm.response.json();\r",
									"const nombres = b.content.map(c => c.name);\r",
									"\r",
									"pm.test(`Cantidad de Productos es Igual a 3`, function () {\r",
									"    pm.expect(b.content.length).to.equal(3);\r",
									"});\r",
									"\r",
									"pm.test(`Productos con coincidencia en Producto.Nombre`, function () {\r",
									"    pm.expect(nombres).contains(\r",
									"        \"Cable USB 3.0 marca Samsung\",\r",
									"        \"Celular Samsung Galaxy S21 Ultra 5G\"\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test(`Productos con coincidencia en Producto.Descripcion`, function () {\r",
									"    pm.expect(nombres).contains(\"Camisa de vestir\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products?query=tElEfOnO sAmSuNg yO QuIErO",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "query",
									"value": "tElEfOnO sAmSuNg yO QuIErO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TF043 - Filtro (Rango de Precios)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const b = pm.response.json();\r",
									"const precios = b.content.map(c => c.price);\r",
									"\r",
									"pm.test(`Cantidad de Productos es Igual a 2`, function () {\r",
									"    pm.expect(b.content.length).to.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(`Productos.Precio son menores a 99`, function () {\r",
									"    precios.forEach(precio => {\r",
									"        pm.expect(precio).to.be.below(99);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(`Productos.Precio son mayores a 17`, function () {\r",
									"    precios.forEach(precio => {\r",
									"        pm.expect(precio).to.be.above(17); \r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products?price=>17&price=<99",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "price",
									"value": ">17"
								},
								{
									"key": "price",
									"value": "<99"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TF044 - Filtro (Por Categoria)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const b = pm.response.json();\r",
									"\r",
									"pm.test(`Cantidad de Productos es Igual a 1`, function () {\r",
									"    pm.expect(b.content.length).to.equal(1);\r",
									"});\r",
									"\r",
									"pm.test(`Producto es el esperado`, function () {\r",
									"    pm.expect(b.content[0].name).eqls(\"Celular Samsung Galaxy S21 Ultra 5G\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/products?categoryId=4",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Crear Producto",
			"item": [
				{
					"name": "TF045 - Exitoso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8080/api/v1/tests/reset-functional-testing-db',\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({}) \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"PRE: ResetDB es 204\", function () {\r",
									"        pm.expect(res).to.have.status(204);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status es 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"const location = pm.response.headers.get(\"Location\");\r",
									"pm.test(`Header 'Location' correcto: ${location}`, function () {\r",
									"    pm.expect(location).to.match(/api\\/v1\\/products\\/\\d+$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Xiaomi Celular Redmi Note 13 8+256gb",
									"type": "text"
								},
								{
									"key": "price",
									"value": "191",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "IMAGEN REFERENCIAL\nTama침o de la pantalla 6.67\"\nTecnolog칤a de la pantalla AMOLED\nTecnolog칤a de la pantalla Dolby Vision\nTecnolog칤a de la pantalla Gorilla Glass\nResoluci칩n m치xima 2400x1080\nAlmacenamiento 256 GB\nCapacidad de la bater칤a 5000 mAh\nFrecuencia del reloj2.4 GHz\nN칰mero de n칰cleos 8 n칰cleos\nMemoria RAM 8 GB\nSistema Operativo Android 13\nConexionesJack 3.5 mm\nConexiones Bluetooth\nConexionesUSB-C\nConexiones Wifi\nConexiones NFC\nConectividad M칩vil 3G\nLector de huella SI\nC치mara Delantera 16 mpx\nC치mara Principal108+8+2 mpx",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "",
									"type": "text"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF046 - No Autenticado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Xiaomi Celular Redmi Note 13 8+256gb",
									"type": "text"
								},
								{
									"key": "price",
									"value": "191",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "IMAGEN REFERENCIAL\nTama침o de la pantalla 6.67\"\nTecnolog칤a de la pantalla AMOLED\nTecnolog칤a de la pantalla Dolby Vision\nTecnolog칤a de la pantalla Gorilla Glass\nResoluci칩n m치xima 2400x1080\nAlmacenamiento 256 GB\nCapacidad de la bater칤a 5000 mAh\nFrecuencia del reloj2.4 GHz\nN칰mero de n칰cleos 8 n칰cleos\nMemoria RAM 8 GB\nSistema Operativo Android 13\nConexionesJack 3.5 mm\nConexiones Bluetooth\nConexionesUSB-C\nConexiones Wifi\nConexiones NFC\nConectividad M칩vil 3G\nLector de huella SI\nC치mara Delantera 16 mpx\nC치mara Principal108+8+2 mpx",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": [
										"/C:/Users/Cristian/OneDrive/Im치genes/Capturas de pantalla/Captura de pantalla (1).png",
										"/C:/Users/Cristian/Downloads/pic.png",
										"/C:/Users/Cristian/Downloads/images.png"
									]
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF047 - No es Vendedor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzM2MDI2MzQ5LCJleHAiOjE3NDM4MDIzNDksImF1dGhvcml0aWVzIjoiW1JPTEVfVVNFUl0ifQ.PVBJ1oCjBmS0ygR7GeN7tlYs_-Way26KU0lysxuZq6imJXvlstKfsvaA9g5LFrhz",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Xiaomi Celular Redmi Note 13 8+256gb",
									"type": "text"
								},
								{
									"key": "price",
									"value": "191",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "IMAGEN REFERENCIAL\nTama침o de la pantalla 6.67\"\nTecnolog칤a de la pantalla AMOLED\nTecnolog칤a de la pantalla Dolby Vision\nTecnolog칤a de la pantalla Gorilla Glass\nResoluci칩n m치xima 2400x1080\nAlmacenamiento 256 GB\nCapacidad de la bater칤a 5000 mAh\nFrecuencia del reloj2.4 GHz\nN칰mero de n칰cleos 8 n칰cleos\nMemoria RAM 8 GB\nSistema Operativo Android 13\nConexionesJack 3.5 mm\nConexiones Bluetooth\nConexionesUSB-C\nConexiones Wifi\nConexiones NFC\nConectividad M칩vil 3G\nLector de huella SI\nC치mara Delantera 16 mpx\nC치mara Principal108+8+2 mpx",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": [
										"/C:/Users/Cristian/OneDrive/Im치genes/Capturas de pantalla/Captura de pantalla (1).png",
										"/C:/Users/Cristian/Downloads/pic.png",
										"/C:/Users/Cristian/Downloads/images.png"
									]
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF048 - Deshabilitado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"Usuario no encotrado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI0IiwiaWF0IjoxNzM2MTQyOTk0LCJleHAiOjE3NDM5MTg5OTQsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.mcn6NOopmjshZxXpJ6OsNBc59NUWt6J1REV8GY_npMN8WFlBUByOcVUxNKfBTVvE",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Xiaomi Celular Redmi Note 13 8+256gb",
									"type": "text"
								},
								{
									"key": "price",
									"value": "191",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "IMAGEN REFERENCIAL\nTama침o de la pantalla 6.67\"\nTecnolog칤a de la pantalla AMOLED\nTecnolog칤a de la pantalla Dolby Vision\nTecnolog칤a de la pantalla Gorilla Glass\nResoluci칩n m치xima 2400x1080\nAlmacenamiento 256 GB\nCapacidad de la bater칤a 5000 mAh\nFrecuencia del reloj2.4 GHz\nN칰mero de n칰cleos 8 n칰cleos\nMemoria RAM 8 GB\nSistema Operativo Android 13\nConexionesJack 3.5 mm\nConexiones Bluetooth\nConexionesUSB-C\nConexiones Wifi\nConexiones NFC\nConectividad M칩vil 3G\nLector de huella SI\nC치mara Delantera 16 mpx\nC치mara Principal108+8+2 mpx",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": [
										"/C:/Users/Cristian/OneDrive/Im치genes/Capturas de pantalla/Captura de pantalla (1).png",
										"/C:/Users/Cristian/Downloads/pic.png",
										"/C:/Users/Cristian/Downloads/images.png"
									]
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF049 - Email no Verificado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"Tu correo electronico no esta verificado. Completa el proceso de verificacion para continuar\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI1IiwiaWF0IjoxNzM2MTQzODE2LCJleHAiOjE3NDM5MTk4MTYsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.eMAvIBTXV2qVRDc8KzrSQ6cyik60Kl3zQgBoRvpW4mmErrnXo39K2AhEL8AKh5Js",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Xiaomi Celular Redmi Note 13 8+256gb",
									"type": "text"
								},
								{
									"key": "price",
									"value": "191",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "IMAGEN REFERENCIAL\nTama침o de la pantalla 6.67\"\nTecnolog칤a de la pantalla AMOLED\nTecnolog칤a de la pantalla Dolby Vision\nTecnolog칤a de la pantalla Gorilla Glass\nResoluci칩n m치xima 2400x1080\nAlmacenamiento 256 GB\nCapacidad de la bater칤a 5000 mAh\nFrecuencia del reloj2.4 GHz\nN칰mero de n칰cleos 8 n칰cleos\nMemoria RAM 8 GB\nSistema Operativo Android 13\nConexionesJack 3.5 mm\nConexiones Bluetooth\nConexionesUSB-C\nConexiones Wifi\nConexiones NFC\nConectividad M칩vil 3G\nLector de huella SI\nC치mara Delantera 16 mpx\nC치mara Principal108+8+2 mpx",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": [
										"postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc",
										"/C:/Users/Cristian/OneDrive/Im치genes/Capturas de pantalla/Captura de pantalla (1).png",
										"/C:/Users/Cristian/Downloads/pic.png",
										"/C:/Users/Cristian/Downloads/images.png"
									]
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF050 - Nombre Invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El nombre del producto debe contener entre 1 y 255 caracteres\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "             ",
									"type": "text"
								},
								{
									"key": "price",
									"value": "191",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "IMAGEN REFERENCIAL\nTama침o de la pantalla 6.67\"\nTecnolog칤a de la pantalla AMOLED\nTecnolog칤a de la pantalla Dolby Vision\nTecnolog칤a de la pantalla Gorilla Glass\nResoluci칩n m치xima 2400x1080\nAlmacenamiento 256 GB\nCapacidad de la bater칤a 5000 mAh\nFrecuencia del reloj2.4 GHz\nN칰mero de n칰cleos 8 n칰cleos\nMemoria RAM 8 GB\nSistema Operativo Android 13\nConexionesJack 3.5 mm\nConexiones Bluetooth\nConexionesUSB-C\nConexiones Wifi\nConexiones NFC\nConectividad M칩vil 3G\nLector de huella SI\nC치mara Delantera 16 mpx\nC치mara Principal108+8+2 mpx",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": "postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF051 - Descripcion Invalida",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"La descripci칩n del producto debe contener entre 1 y 1000 caracteres\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Titulo 123",
									"type": "text"
								},
								{
									"key": "price",
									"value": "191",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "                                  ",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": "postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF052 - Precio Invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El precio no puede ser negativo\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Titulo 123",
									"type": "text"
								},
								{
									"key": "price",
									"value": "-1",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "        descripcion                          ",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": "postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF053 - Stock Invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El stock no puede ser negativo\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Titulo 123",
									"type": "text"
								},
								{
									"key": "price",
									"value": "0",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "-1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "        descripcion                          ",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": "postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF054 - Peso Aproximado Invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El peso aproximado en libras del producto no puede ser negativo\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Titulo 123",
									"type": "text"
								},
								{
									"key": "price",
									"value": "0",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "0",
									"type": "text"
								},
								{
									"key": "description",
									"value": "        descripcion                          ",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "-1",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": "postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF055 - Altura Aproximado Invalida",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"La altura aproximada en centimetros del producto no puede ser negativa\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Titulo 123",
									"type": "text"
								},
								{
									"key": "price",
									"value": "0",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "0",
									"type": "text"
								},
								{
									"key": "description",
									"value": "        descripcion                          ",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "0",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "-1",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": "postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF056 - Ancho Aproximado Invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El ancho aproximado en centimetros del producto no puede ser negativo\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Titulo 123",
									"type": "text"
								},
								{
									"key": "price",
									"value": "0",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "0",
									"type": "text"
								},
								{
									"key": "description",
									"value": "        descripcion                          ",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "0",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "-1",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "0",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": "postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF057 - Producto Sin Imagenes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"La imagen del producto es requerida\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Titulo 123",
									"type": "text"
								},
								{
									"key": "price",
									"value": "0",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "0",
									"type": "text"
								},
								{
									"key": "description",
									"value": "        descripcion                          ",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "0",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "0",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "0",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": []
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TF058 - Producto Ya Registrado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const msg = \"El nombre del producto ya existe para el usuario especificado\";\r",
									"\r",
									"pm.test(\"Estado de la respuesta es 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(`Mensaje de error en el cuerpo de la respuesta es: ${msg}`, function () {\r",
									"    pm.expect(pm.response.json().message).eqls(msg);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI2IiwiaWF0IjoxNzM2MTQxMjY4LCJleHAiOjE3NDM5MTcyNjgsImF1dGhvcml0aWVzIjoiW1JPTEVfU0VMTEVSXSJ9.Mj9qzwWtLOOLOHPSVItDBc0UVAoSPh1NjTLhRzrjEopX-AaLsq6RBmlRheg7jRQe",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Cable USB 3.0 marca Samsung",
									"type": "text"
								},
								{
									"key": "price",
									"value": "191",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "1 metro de largo, 480 Mbps de velocidad de transferencia de datos, compatible con USB 2.0 y 1.1",
									"type": "text"
								},
								{
									"key": "approxWeightLb",
									"value": "7",
									"type": "text"
								},
								{
									"key": "approxWidthCm",
									"value": "18",
									"type": "text"
								},
								{
									"key": "approxHeightCm",
									"value": "25",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": "postman-cloud:///1efcbef3-eb00-4500-9f0b-088b611023dc"
								},
								{
									"key": "categoryId",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/products",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}